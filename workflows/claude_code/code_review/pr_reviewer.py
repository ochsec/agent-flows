#!/usr/bin/env python3
"""
Simple PR Review Workflow - Claude Code Integration

A straightforward code review workflow that uses Claude Code's built-in
GitHub integration to review pull requests and save results to files.
"""

import os
import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path
import argparse
import logging


class SimplePRReviewer:
    """Simple PR reviewer using Claude Code"""
    
    def __init__(self, model: str = "sonnet"):
        self.model = model
        self.logger = logging.getLogger(__name__)
    
    def review_pr(self, pr_number: int, repository: str = None, custom_instructions: str = None) -> str:
        """Review a PR using Claude Code and return the result"""
        
        # Build the review prompt
        if repository and repository != "current-repo":
            repo_instruction = f"Please review GitHub PR #{pr_number} in repository {repository}."
        else:
            repo_instruction = f"Please review GitHub PR #{pr_number} in this repository."
        
        # Create comprehensive review prompt
        prompt = f"""{repo_instruction}

Please provide a thorough code review covering:

1. **Code Quality & Best Practices**
   - Code structure and organization
   - Naming conventions and readability
   - Design patterns and architecture
   - Language-specific best practices

2. **Security Analysis**
   - Potential security vulnerabilities
   - Authentication and authorization issues
   - Data exposure risks
   - Input validation and sanitization

3. **Performance Considerations**
   - Algorithmic efficiency
   - Memory usage patterns
   - Database query optimization
   - Scalability concerns

4. **Documentation & Testing**
   - Code comments and documentation
   - Test coverage and quality
   - API documentation completeness

5. **Overall Assessment**
   - Summary of key findings
   - Recommendation (Approve/Request Changes/Reject)
   - Priority issues that need immediate attention

{f"Additional instructions: {custom_instructions}" if custom_instructions else ""}

Please be specific with file names and line numbers where applicable, and provide actionable recommendations for improvements."""

        # Execute Claude Code command
        try:
            command = ["claude", "-p", "--model", self.model, prompt]
            
            self.logger.info(f"Executing Claude Code review for PR #{pr_number}")
            self.logger.info(f"Using model: {self.model}")
            
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                timeout=600  # 10 minute timeout for comprehensive reviews
            )
            
            if result.returncode != 0:
                error_msg = f"Claude Code failed: {result.stderr}"
                self.logger.error(error_msg)
                raise Exception(error_msg)
            
            return result.stdout.strip()
            
        except subprocess.TimeoutExpired:
            error_msg = "Claude Code review timed out (10 minutes)"
            self.logger.error(error_msg)
            raise Exception(error_msg)
        except Exception as e:
            error_msg = f"Failed to execute Claude Code review: {e}"
            self.logger.error(error_msg)
            raise Exception(error_msg)
    
    def save_review(self, pr_number: int, repository: str, review_content: str) -> tuple:
        """Save the review to files and return file paths"""
        
        # Generate file names
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        repo_name = repository.replace("/", "_") if repository != "current-repo" else "current-repo"
        
        markdown_file = f"pr_review_{repo_name}_#{pr_number}_{timestamp}.md"
        json_file = f"pr_review_{repo_name}_#{pr_number}_{timestamp}.json"
        
        # Save markdown review
        with open(markdown_file, 'w', encoding='utf-8') as f:
            f.write(f"# Code Review: PR #{pr_number}\n\n")
            f.write(f"**Repository:** {repository}\n")
            f.write(f"**Review Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"**Claude Model:** {self.model}\n\n")
            f.write("---\n\n")
            f.write(review_content)
            f.write("\n\n---\n")
            f.write("*Generated by Claude Code Simple PR Reviewer*\n")
        
        # Save JSON metadata
        review_data = {
            "pr_number": pr_number,
            "repository": repository,
            "model": self.model,
            "timestamp": datetime.now().isoformat(),
            "review_content": review_content,
            "files": {
                "markdown": markdown_file,
                "json": json_file
            }
        }
        
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(review_data, f, indent=2, ensure_ascii=False)
        
        return markdown_file, json_file


def main():
    """Main entry point"""
    
    parser = argparse.ArgumentParser(description="Simple PR Review using Claude Code")
    parser.add_argument("pr_number", type=int, help="Pull request number to review")
    parser.add_argument("--repository", help="Repository in format owner/repo (defaults to current repo)")
    parser.add_argument("--model", default="sonnet", help="Claude model to use (sonnet, opus, haiku)")
    parser.add_argument("--instructions", help="Additional review instructions")
    parser.add_argument("--verbose", "-v", action="store_true", help="Enable verbose logging")
    
    args = parser.parse_args()
    
    # Configure logging
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # Initialize reviewer
    reviewer = SimplePRReviewer(model=args.model)
    repository = args.repository or "current-repo"
    
    try:
        print(f"üîç Starting review of PR #{args.pr_number}...")
        
        # Perform review
        review_content = reviewer.review_pr(
            pr_number=args.pr_number,
            repository=repository,
            custom_instructions=args.instructions
        )
        
        # Save results
        markdown_file, json_file = reviewer.save_review(
            pr_number=args.pr_number,
            repository=repository,
            review_content=review_content
        )
        
        print("‚úÖ PR Review completed successfully!")
        print(f"üìÑ Markdown review: {markdown_file}")
        print(f"üìä JSON data: {json_file}")
        print(f"\nTo view the review:")
        print(f"  cat {markdown_file}")
        
    except Exception as e:
        print(f"‚ùå Review failed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()